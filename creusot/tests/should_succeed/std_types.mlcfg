module Ambient
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = uint64
  type isize = int64

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Type
  type core_option_option 't =
      | Core_Option_Option_None
      | Core_Option_Option_Some('t)

  predicate drop_core_option_option (drop_'t : 't -> bool) (self : core_option_option 't) =
    match (self) with
      | Core_Option_Option_None -> true
      | Core_Option_Option_Some(a) -> drop_'t a
      end

  type mytype  =
      | MyType(core_option_option uint32)

  predicate drop_mytype (self : mytype) =
    let MyType(a) = self in drop_core_option_option drop_uint a
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }


end
